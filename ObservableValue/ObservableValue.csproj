<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
		<Authors>electricessence</Authors>
		<TargetFrameworks>netstandard2.0; netstandard2.1</TargetFrameworks>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>
		<RootNamespace>Open.Observable</RootNamespace>
		<AssemblyName>ObservableValue</AssemblyName>
		<Description>A class representing a value that when updated (posted) signals changes to observers.
Will post current value (if initialized) when subscribing.  Synchronized to ensure ordering.
Compatible with IObservable&lt;T&gt; and System.Reactive.	</Description>
		<PackageProjectUrl>https://github.com/electricessence/ObservableValue</PackageProjectUrl>
		<PackageLicenseUrl></PackageLicenseUrl>
		<Copyright>https://github.com/electricessence/ObservableValue/blob/master/LICENSE</Copyright>
		<RepositoryType>git</RepositoryType>
		<PackageTags>observable; observer; iobservable; iobserver; reactive; reactivex; system.reactive; observable value;</PackageTags>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<Version>1.2.0</Version>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageReleaseNotes></PackageReleaseNotes>
		<RepositoryUrl>https://github.com/electricessence/ObservableValue</RepositoryUrl>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Open.Threading.ReadWrite" Version="1.3.3" />
		<PackageReference Include="System.Reactive" Version="4.4.1" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="3.0.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

</Project>
